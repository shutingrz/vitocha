head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2013.11.17.03.37.36;	author tss;	state Exp;
branches;
next	1.5;

1.5
date	2013.02.16.06.37.10;	author tss;	state Exp;
branches;
next	1.4;

1.4
date	2013.02.16.05.56.10;	author tss;	state Exp;
branches;
next	1.3;

1.3
date	2012.11.06.13.38.48;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.30.14.21.13;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.28.02.50.39;	author root;	state Exp;
branches;
next	;


desc
@@


1.6
log
@adapt to Ruby2.0
@
text
@#!/usr/local/bin/ruby20
# VITOCHA unjail

#Copyright (c) 2012-2013, Tsunehiko Suzuki
#All rights reserved.
#                                                                              
# Redistribution and use in source and binary forms, with or without           
# modification, are permitted provided that the following conditions           
# are met:                                                                     
# 1. Redistributions of source code must retain the above copyright            
#    notice, this list of conditions and the following disclaimer.             
# 2. Redistributions in binary form must reproduce the above copyright         
#    notice, this list of conditions and the following disclaimer in the       
#    documentation and/or other materials provided with the distribution.      
#                                                                              
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND           
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE          
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS      
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)        
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF       
# SUCH DAMAGE.                                                                 

# 	$Id: unjail.rb,v 1.5 2013/02/16 06:37:10 tss Exp $	

require 'shell'
require './shcommand'
require './equipment'

# jails path
$jails="/jails"

################################################################
# Destroy jails
################################################################

sh=Shell.new
sh.transact{
  jls("host.hostname").each{|name|
    target=Equipment.new(name.chomp)
    target.destroy
  }
}


@


1.5
log
@add license
@
text
@d1 1
a1 1
#!/usr/local/bin/ruby
d28 1
a28 1
# 	$Id: unjail.rb,v 1.4 2013/02/16 05:56:10 tss Exp tss $	
d31 2
a32 2
require 'shcommand'
require 'equipment'
@


1.4
log
@change path
@
text
@d2 28
a29 4
# Internet Builder
# 	$Id: unjail.rb,v 1.3 2012/11/06 13:38:48 root Exp tss $	
# T.Suzuki
#
d38 1
a38 4
# Main
#
# Setup router0 as a gateway to realserver
#  realsever--epair0b--(epair0a--router0--epair1a--epair1b--bridge0)
@


1.3
log
@use iterator
@
text
@d3 1
a3 1
# 	$Id: unjail.rb,v 1.2 2012/10/30 14:21:13 root Exp root $	
d11 1
a11 1
$jails="/usr/local/jails"
@


1.2
log
@require shcommand and router
@
text
@d3 1
a3 1
# 	$Id: unjail.rb,v 1.1 2012/10/28 02:50:39 root Exp root $	
d7 2
a8 2
require 'shcomand'
require 'router'
d11 1
a11 1
$jails="/jails"
d19 1
a19 4
router0=Router.new("router0")
router0.destroy
bridge0=Router.new("bridge0")
bridge0.destroy
d22 4
a25 4
  ifconfig("epair0a destroy")
  ifconfig("epair1a destroy")
  ifconfig("vbridge0 destroy")
  ifconfig("vbridge0 destroy")
a28 1

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
# 	$Id: jail.rb,v 1.2 2012/10/13 02:38:40 root Exp $	
d7 2
a12 92
#
# define command
#
Shell.def_system_command("ifconfig_org", path = "/sbin/ifconfig")
Shell.def_system_command("mount", path = "/sbin/mount")
Shell.def_system_command("umount", path = "/sbin/umount")
Shell.def_system_command("mount_nullfs", path = "/sbin/mount_nullfs")
Shell.def_system_command("sysctl", path = "/sbin/sysctl")
Shell.def_system_command("jail", path = "/usr/sbin/jail")
Shell.def_system_command("jls", path = "/usr/sbin/jls")
Shell.def_system_command("jexec_org", path = "/usr/sbin/jexec")

#
# primitive commands
#
def ifconfig(param)
  ifconfig_org(*param.split)
end

def jexec(name,param)
  jexec_org(name,*param.split)
end

def ifalias(interface,ip)
    ifconfig_org("#{interface}","alias","#{ip}")
end

def jailc(name)
  jail("-c","vnet","host.hostname=#{name}","name=#{name}","path=#{$jails}/#{name}","persist")
end

def mt_devfs(path)
  mount("-t","devfs","devfs","#{$jails}/#{path}/dev")
end

def umt_devfs(path)
  umount("#{$jails}/#{path}/dev")
end

def mt_nullfs(path)
  mount_nullfs("#{$jails}/basejail","#{$jails}/#{path}/basejail")
end

def umt_nullfs(path)
  umount("#{$jails}/#{path}/basejail")
end

#
# macro commands
#
def createpair
  ifconfig("epair create")
  epairnum
end

def epairnum
  ifconfig_org.grep(/epair.a/).size-1
end

# Parts Classes
class Router

  def initialize(name)
    @@name=name
    sh=Shell.new
    sh.transact{
      if jls("-j",name).to_a.size == 1 then
        jailc(name)
        mt_devfs(name)
        mt_nullfs(name)
        jexec(name,"sysctl -w net.inet.ip.forwarding=1")
        jexec(name,"ifconfig lo0 127.0.0.1/24 up")
        jexec(name,"ipfw add allow ip from any to any")
      end
    }
  end

  def destroy
     puts "destroy #{@@name}"
     jname=@@name 
     sh=Shell.new
     sh.transact{
       ifnames=jexec(jname,"ifconfig -l").to_s.split(" ").select{|item| item =~ /epair.*/}
       ifnames.each{|epair| ifconfig("#{epair} -vnet #{jname}")}
       umt_nullfs(jname)
       umt_devfs(jname)
       jail("-r",jname)
     }
  end

end

d21 10
@
