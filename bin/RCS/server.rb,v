head	1.6;
access;
symbols;
locks; strict;
comment	@# @;


1.6
date	2013.02.16.06.34.47;	author tss;	state Exp;
branches;
next	1.5;

1.5
date	2013.01.20.07.35.14;	author tss;	state Exp;
branches;
next	1.4;

1.4
date	2013.01.20.07.34.22;	author tss;	state Exp;
branches;
next	1.3;

1.3
date	2012.10.28.14.15.48;	author root;	state Exp;
branches;
next	1.2;

1.2
date	2012.10.28.14.07.07;	author root;	state Exp;
branches;
next	1.1;

1.1
date	2012.10.28.13.31.06;	author root;	state Exp;
branches;
next	;


desc
@@


1.6
log
@add license
@
text
@# VITOCHA Server Class

#Copyright (c) 2012-2013, Tsunehiko Suzuki
#All rights reserved.
#                                                                              
# Redistribution and use in source and binary forms, with or without           
# modification, are permitted provided that the following conditions           
# are met:                                                                     
# 1. Redistributions of source code must retain the above copyright            
#    notice, this list of conditions and the following disclaimer.             
# 2. Redistributions in binary form must reproduce the above copyright         
#    notice, this list of conditions and the following disclaimer in the       
#    documentation and/or other materials provided with the distribution.      
#                                                                              
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND           
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE        
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE          
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL   
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS      
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)        
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT   
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY    
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF       
# SUCH DAMAGE.                                                                 

# 	$Id: server.rb,v 1.5 2013/01/20 07:35:14 tss Exp tss $

class Server < Equipment

def assigngw(gw)
  name=@@name
  sh=Shell.new
  sh.transact{
    jexec(name,"route add default #{gw}")
  }
end

end
@


1.5
log
@rm shbang
@
text
@d1 27
a27 4
# Internet Builder Server Class
# 	$Id: server.rb,v 1.4 2013/01/20 07:34:22 tss Exp tss $
# T.Suzuki
#
a28 2
# man
 
@


1.4
log
@?
@
text
@a0 1
#!/usr/local/bin/ruby
d2 1
a2 1
# 	$Id: server.rb,v 1.3 2012/10/28 14:15:48 root Exp root $
@


1.3
log
@change net.inet.ip.forwarding
@
text
@d3 1
a3 1
# 	$Id: server.rb,v 1.2 2012/10/28 14:07:07 root Exp root $
d11 8
@


1.2
log
@override net.inet.ip.forwarding=0
@
text
@d3 1
a3 1
# 	$Id: server.rb,v 1.1 2012/10/28 13:31:06 root Exp root $
a10 10
  def initialize(jailname)
    super
    sh=Shell.new
    sh.transact{
      if jls("-j",jailname).to_a.size == 1
       jexec(jailname,"sysctl -w net.inet.ip.forwarding=0")
      end
    }
  end

@


1.1
log
@Initial revision
@
text
@d2 2
a3 2
# Internet Builder Router Class
# 	$Id: router.rb,v 1.5 2012/10/28 13:18:54 root Exp $
a7 6
# router=Router.new(jailname) : create a router
# router.up(epair)  : ifconfig <epair> up
# router.down(epair)  : ifconfig <epair> down
# router.connect(epair)  : connect epair to me
# router.assingip(epair,ip,mask) : ifconfig <epair> inet <ip> netmask <mask>
# router.destroy : jail -r in safe manner
d9 1
a9 1
class Router
d12 1
a12 2
    @@name=jailname
    @@epairs=[]
d16 1
a16 6
        jailc(jailname)
        mt_devfs(jailname)
        mt_nullfs(jailname)
        jexec(jailname,"sysctl -w net.inet.ip.forwarding=1")
        jexec(jailname,"ifconfig lo0 127.0.0.1/24 up")
        jexec(jailname,"ipfw add allow ip from any to any")
a20 58
  def destroy
    puts "destroy #{@@name}"
    jname=@@name 
    sh=Shell.new
    sh.transact{
       ifnames=jexec(jname,"ifconfig -l").to_s.split(" ").select{|item| item =~ /epair.*/}
       ifnames.each{|epair| ifconfig("#{epair} -vnet #{jname}")}
       umt_nullfs(jname)
       jail("-r",jname)
       umt_devfs(jname)
     }
  end

  def connect(epair)
    name=@@name 
    sh=Shell.new
    sh.transact{
      ifconfig("#{epair} vnet #{name}")
    }
    tomocha.register(epair,name)
    @@epairs<< epair
  end

  def disconnect(epair)
    name=@@name 
    sh=Shell.new
    sh.transact{
      ifconfig("#{epair} -vnet #{name}")
    }
    tomocha.unregister(epair,name)
    @@epairs.delete(epair)
  end

  def assignip(epair,ip,mask)
    name=@@name 
    sh=Shell.new
    sh.transact{
      jexec(name,"ifconfig #{epair} inet #{ip} netmask #{mask}")
    }
  end

  def up(epair)
    name=@@name 
    sh=Shell.new
    sh.transact{
      jexec(name,"ifconfig #{epair} up")
    }
  end

  def down(epair)
    name=@@name 
    sh=Shell.new
    sh.transact{
      jexec(name,"ifconfig #{epair} down")
    }
  end

  attr_accessor :epairs
@
